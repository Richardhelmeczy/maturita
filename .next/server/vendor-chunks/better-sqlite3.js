"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/better-sqlite3";
exports.ids = ["vendor-chunks/better-sqlite3"];
exports.modules = {

/***/ "(ssr)/./node_modules/better-sqlite3/lib/database.js":
/*!*****************************************************!*\
  !*** ./node_modules/better-sqlite3/lib/database.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/better-sqlite3/lib/util.js\");\nconst SqliteError = __webpack_require__(/*! ./sqlite-error */ \"(ssr)/./node_modules/better-sqlite3/lib/sqlite-error.js\");\nlet DEFAULT_ADDON;\nfunction Database(filenameGiven, options) {\n    if (new.target == null) {\n        return new Database(filenameGiven, options);\n    }\n    // Apply defaults\n    let buffer;\n    if (Buffer.isBuffer(filenameGiven)) {\n        buffer = filenameGiven;\n        filenameGiven = \":memory:\";\n    }\n    if (filenameGiven == null) filenameGiven = \"\";\n    if (options == null) options = {};\n    // Validate arguments\n    if (typeof filenameGiven !== \"string\") throw new TypeError(\"Expected first argument to be a string\");\n    if (typeof options !== \"object\") throw new TypeError(\"Expected second argument to be an options object\");\n    if (\"readOnly\" in options) throw new TypeError('Misspelled option \"readOnly\" should be \"readonly\"');\n    if (\"memory\" in options) throw new TypeError('Option \"memory\" was removed in v7.0.0 (use \":memory:\" filename instead)');\n    // Interpret options\n    const filename = filenameGiven.trim();\n    const anonymous = filename === \"\" || filename === \":memory:\";\n    const readonly = util.getBooleanOption(options, \"readonly\");\n    const fileMustExist = util.getBooleanOption(options, \"fileMustExist\");\n    const timeout = \"timeout\" in options ? options.timeout : 5000;\n    const verbose = \"verbose\" in options ? options.verbose : null;\n    const nativeBinding = \"nativeBinding\" in options ? options.nativeBinding : null;\n    // Validate interpreted options\n    if (readonly && anonymous && !buffer) throw new TypeError(\"In-memory/temporary databases cannot be readonly\");\n    if (!Number.isInteger(timeout) || timeout < 0) throw new TypeError('Expected the \"timeout\" option to be a positive integer');\n    if (timeout > 0x7fffffff) throw new RangeError('Option \"timeout\" cannot be greater than 2147483647');\n    if (verbose != null && typeof verbose !== \"function\") throw new TypeError('Expected the \"verbose\" option to be a function');\n    if (nativeBinding != null && typeof nativeBinding !== \"string\" && typeof nativeBinding !== \"object\") throw new TypeError('Expected the \"nativeBinding\" option to be a string or addon object');\n    // Load the native addon\n    let addon;\n    if (nativeBinding == null) {\n        addon = DEFAULT_ADDON || (DEFAULT_ADDON = __webpack_require__(/*! bindings */ \"(ssr)/./node_modules/bindings/bindings.js\")(\"better_sqlite3.node\"));\n    } else if (typeof nativeBinding === \"string\") {\n        // See <https://webpack.js.org/api/module-variables/#__non_webpack_require__-webpack-specific>\n        const requireFunc = typeof require === \"function\" ? require : __webpack_require__(\"(ssr)/./node_modules/better-sqlite3/lib sync recursive\");\n        addon = requireFunc(path.resolve(nativeBinding).replace(/(\\.node)?$/, \".node\"));\n    } else {\n        // See <https://github.com/WiseLibs/better-sqlite3/issues/972>\n        addon = nativeBinding;\n    }\n    if (!addon.isInitialized) {\n        addon.setErrorConstructor(SqliteError);\n        addon.isInitialized = true;\n    }\n    // Make sure the specified directory exists\n    if (!anonymous && !fs.existsSync(path.dirname(filename))) {\n        throw new TypeError(\"Cannot open database because the directory does not exist\");\n    }\n    Object.defineProperties(this, {\n        [util.cppdb]: {\n            value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null)\n        },\n        ...wrappers.getters\n    });\n}\nconst wrappers = __webpack_require__(/*! ./methods/wrappers */ \"(ssr)/./node_modules/better-sqlite3/lib/methods/wrappers.js\");\nDatabase.prototype.prepare = wrappers.prepare;\nDatabase.prototype.transaction = __webpack_require__(/*! ./methods/transaction */ \"(ssr)/./node_modules/better-sqlite3/lib/methods/transaction.js\");\nDatabase.prototype.pragma = __webpack_require__(/*! ./methods/pragma */ \"(ssr)/./node_modules/better-sqlite3/lib/methods/pragma.js\");\nDatabase.prototype.backup = __webpack_require__(/*! ./methods/backup */ \"(ssr)/./node_modules/better-sqlite3/lib/methods/backup.js\");\nDatabase.prototype.serialize = __webpack_require__(/*! ./methods/serialize */ \"(ssr)/./node_modules/better-sqlite3/lib/methods/serialize.js\");\nDatabase.prototype.function = __webpack_require__(/*! ./methods/function */ \"(ssr)/./node_modules/better-sqlite3/lib/methods/function.js\");\nDatabase.prototype.aggregate = __webpack_require__(/*! ./methods/aggregate */ \"(ssr)/./node_modules/better-sqlite3/lib/methods/aggregate.js\");\nDatabase.prototype.table = __webpack_require__(/*! ./methods/table */ \"(ssr)/./node_modules/better-sqlite3/lib/methods/table.js\");\nDatabase.prototype.loadExtension = wrappers.loadExtension;\nDatabase.prototype.exec = wrappers.exec;\nDatabase.prototype.close = wrappers.close;\nDatabase.prototype.defaultSafeIntegers = wrappers.defaultSafeIntegers;\nDatabase.prototype.unsafeMode = wrappers.unsafeMode;\nDatabase.prototype[util.inspect] = __webpack_require__(/*! ./methods/inspect */ \"(ssr)/./node_modules/better-sqlite3/lib/methods/inspect.js\");\nmodule.exports = Database;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-sqlite3/lib/database.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-sqlite3/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/better-sqlite3/lib/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./database */ \"(ssr)/./node_modules/better-sqlite3/lib/database.js\");\nmodule.exports.SqliteError = __webpack_require__(/*! ./sqlite-error */ \"(ssr)/./node_modules/better-sqlite3/lib/sqlite-error.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0FBLDZHQUF5QjtBQUN6QkEsaUlBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL2JldHRlci1zcWxpdGUzL2xpYi9pbmRleC5qcz80M2Y1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kYXRhYmFzZScpO1xubW9kdWxlLmV4cG9ydHMuU3FsaXRlRXJyb3IgPSByZXF1aXJlKCcuL3NxbGl0ZS1lcnJvcicpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiU3FsaXRlRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-sqlite3/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-sqlite3/lib/methods/aggregate.js":
/*!**************************************************************!*\
  !*** ./node_modules/better-sqlite3/lib/methods/aggregate.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { getBooleanOption, cppdb } = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/better-sqlite3/lib/util.js\");\nmodule.exports = function defineAggregate(name, options) {\n    // Validate arguments\n    if (typeof name !== \"string\") throw new TypeError(\"Expected first argument to be a string\");\n    if (typeof options !== \"object\" || options === null) throw new TypeError(\"Expected second argument to be an options object\");\n    if (!name) throw new TypeError(\"User-defined function name cannot be an empty string\");\n    // Interpret options\n    const start = \"start\" in options ? options.start : null;\n    const step = getFunctionOption(options, \"step\", true);\n    const inverse = getFunctionOption(options, \"inverse\", false);\n    const result = getFunctionOption(options, \"result\", false);\n    const safeIntegers = \"safeIntegers\" in options ? +getBooleanOption(options, \"safeIntegers\") : 2;\n    const deterministic = getBooleanOption(options, \"deterministic\");\n    const directOnly = getBooleanOption(options, \"directOnly\");\n    const varargs = getBooleanOption(options, \"varargs\");\n    let argCount = -1;\n    // Determine argument count\n    if (!varargs) {\n        argCount = Math.max(getLength(step), inverse ? getLength(inverse) : 0);\n        if (argCount > 0) argCount -= 1;\n        if (argCount > 100) throw new RangeError(\"User-defined functions cannot have more than 100 arguments\");\n    }\n    this[cppdb].aggregate(start, step, inverse, result, name, argCount, safeIntegers, deterministic, directOnly);\n    return this;\n};\nconst getFunctionOption = (options, key, required)=>{\n    const value = key in options ? options[key] : null;\n    if (typeof value === \"function\") return value;\n    if (value != null) throw new TypeError(`Expected the \"${key}\" option to be a function`);\n    if (required) throw new TypeError(`Missing required option \"${key}\"`);\n    return null;\n};\nconst getLength = ({ length })=>{\n    if (Number.isInteger(length) && length >= 0) return length;\n    throw new TypeError(\"Expected function.length to be a positive integer\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvYWdncmVnYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTSxFQUFFQSxnQkFBZ0IsRUFBRUMsS0FBSyxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBRTVDQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsZ0JBQWdCQyxJQUFJLEVBQUVDLE9BQU87SUFDdEQscUJBQXFCO0lBQ3JCLElBQUksT0FBT0QsU0FBUyxVQUFVLE1BQU0sSUFBSUUsVUFBVTtJQUNsRCxJQUFJLE9BQU9ELFlBQVksWUFBWUEsWUFBWSxNQUFNLE1BQU0sSUFBSUMsVUFBVTtJQUN6RSxJQUFJLENBQUNGLE1BQU0sTUFBTSxJQUFJRSxVQUFVO0lBRS9CLG9CQUFvQjtJQUNwQixNQUFNQyxRQUFRLFdBQVdGLFVBQVVBLFFBQVFFLEtBQUssR0FBRztJQUNuRCxNQUFNQyxPQUFPQyxrQkFBa0JKLFNBQVMsUUFBUTtJQUNoRCxNQUFNSyxVQUFVRCxrQkFBa0JKLFNBQVMsV0FBVztJQUN0RCxNQUFNTSxTQUFTRixrQkFBa0JKLFNBQVMsVUFBVTtJQUNwRCxNQUFNTyxlQUFlLGtCQUFrQlAsVUFBVSxDQUFDUCxpQkFBaUJPLFNBQVMsa0JBQWtCO0lBQzlGLE1BQU1RLGdCQUFnQmYsaUJBQWlCTyxTQUFTO0lBQ2hELE1BQU1TLGFBQWFoQixpQkFBaUJPLFNBQVM7SUFDN0MsTUFBTVUsVUFBVWpCLGlCQUFpQk8sU0FBUztJQUMxQyxJQUFJVyxXQUFXLENBQUM7SUFFaEIsMkJBQTJCO0lBQzNCLElBQUksQ0FBQ0QsU0FBUztRQUNiQyxXQUFXQyxLQUFLQyxHQUFHLENBQUNDLFVBQVVYLE9BQU9FLFVBQVVTLFVBQVVULFdBQVc7UUFDcEUsSUFBSU0sV0FBVyxHQUFHQSxZQUFZO1FBQzlCLElBQUlBLFdBQVcsS0FBSyxNQUFNLElBQUlJLFdBQVc7SUFDMUM7SUFFQSxJQUFJLENBQUNyQixNQUFNLENBQUNzQixTQUFTLENBQUNkLE9BQU9DLE1BQU1FLFNBQVNDLFFBQVFQLE1BQU1ZLFVBQVVKLGNBQWNDLGVBQWVDO0lBQ2pHLE9BQU8sSUFBSTtBQUNaO0FBRUEsTUFBTUwsb0JBQW9CLENBQUNKLFNBQVNpQixLQUFLQztJQUN4QyxNQUFNQyxRQUFRRixPQUFPakIsVUFBVUEsT0FBTyxDQUFDaUIsSUFBSSxHQUFHO0lBQzlDLElBQUksT0FBT0UsVUFBVSxZQUFZLE9BQU9BO0lBQ3hDLElBQUlBLFNBQVMsTUFBTSxNQUFNLElBQUlsQixVQUFVLENBQUMsY0FBYyxFQUFFZ0IsSUFBSSx5QkFBeUIsQ0FBQztJQUN0RixJQUFJQyxVQUFVLE1BQU0sSUFBSWpCLFVBQVUsQ0FBQyx5QkFBeUIsRUFBRWdCLElBQUksQ0FBQyxDQUFDO0lBQ3BFLE9BQU87QUFDUjtBQUVBLE1BQU1ILFlBQVksQ0FBQyxFQUFFTSxNQUFNLEVBQUU7SUFDNUIsSUFBSUMsT0FBT0MsU0FBUyxDQUFDRixXQUFXQSxVQUFVLEdBQUcsT0FBT0E7SUFDcEQsTUFBTSxJQUFJbkIsVUFBVTtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy9hZ2dyZWdhdGUuanM/NzJlMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7IGdldEJvb2xlYW5PcHRpb24sIGNwcGRiIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lQWdncmVnYXRlKG5hbWUsIG9wdGlvbnMpIHtcblx0Ly8gVmFsaWRhdGUgYXJndW1lbnRzXG5cdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGEgc3RyaW5nJyk7XG5cdGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgfHwgb3B0aW9ucyA9PT0gbnVsbCkgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgc2Vjb25kIGFyZ3VtZW50IHRvIGJlIGFuIG9wdGlvbnMgb2JqZWN0Jyk7XG5cdGlmICghbmFtZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVXNlci1kZWZpbmVkIGZ1bmN0aW9uIG5hbWUgY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZycpO1xuXG5cdC8vIEludGVycHJldCBvcHRpb25zXG5cdGNvbnN0IHN0YXJ0ID0gJ3N0YXJ0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGFydCA6IG51bGw7XG5cdGNvbnN0IHN0ZXAgPSBnZXRGdW5jdGlvbk9wdGlvbihvcHRpb25zLCAnc3RlcCcsIHRydWUpO1xuXHRjb25zdCBpbnZlcnNlID0gZ2V0RnVuY3Rpb25PcHRpb24ob3B0aW9ucywgJ2ludmVyc2UnLCBmYWxzZSk7XG5cdGNvbnN0IHJlc3VsdCA9IGdldEZ1bmN0aW9uT3B0aW9uKG9wdGlvbnMsICdyZXN1bHQnLCBmYWxzZSk7XG5cdGNvbnN0IHNhZmVJbnRlZ2VycyA9ICdzYWZlSW50ZWdlcnMnIGluIG9wdGlvbnMgPyArZ2V0Qm9vbGVhbk9wdGlvbihvcHRpb25zLCAnc2FmZUludGVnZXJzJykgOiAyO1xuXHRjb25zdCBkZXRlcm1pbmlzdGljID0gZ2V0Qm9vbGVhbk9wdGlvbihvcHRpb25zLCAnZGV0ZXJtaW5pc3RpYycpO1xuXHRjb25zdCBkaXJlY3RPbmx5ID0gZ2V0Qm9vbGVhbk9wdGlvbihvcHRpb25zLCAnZGlyZWN0T25seScpO1xuXHRjb25zdCB2YXJhcmdzID0gZ2V0Qm9vbGVhbk9wdGlvbihvcHRpb25zLCAndmFyYXJncycpO1xuXHRsZXQgYXJnQ291bnQgPSAtMTtcblxuXHQvLyBEZXRlcm1pbmUgYXJndW1lbnQgY291bnRcblx0aWYgKCF2YXJhcmdzKSB7XG5cdFx0YXJnQ291bnQgPSBNYXRoLm1heChnZXRMZW5ndGgoc3RlcCksIGludmVyc2UgPyBnZXRMZW5ndGgoaW52ZXJzZSkgOiAwKTtcblx0XHRpZiAoYXJnQ291bnQgPiAwKSBhcmdDb3VudCAtPSAxO1xuXHRcdGlmIChhcmdDb3VudCA+IDEwMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1VzZXItZGVmaW5lZCBmdW5jdGlvbnMgY2Fubm90IGhhdmUgbW9yZSB0aGFuIDEwMCBhcmd1bWVudHMnKTtcblx0fVxuXG5cdHRoaXNbY3BwZGJdLmFnZ3JlZ2F0ZShzdGFydCwgc3RlcCwgaW52ZXJzZSwgcmVzdWx0LCBuYW1lLCBhcmdDb3VudCwgc2FmZUludGVnZXJzLCBkZXRlcm1pbmlzdGljLCBkaXJlY3RPbmx5KTtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG5jb25zdCBnZXRGdW5jdGlvbk9wdGlvbiA9IChvcHRpb25zLCBrZXksIHJlcXVpcmVkKSA9PiB7XG5cdGNvbnN0IHZhbHVlID0ga2V5IGluIG9wdGlvbnMgPyBvcHRpb25zW2tleV0gOiBudWxsO1xuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdmFsdWU7XG5cdGlmICh2YWx1ZSAhPSBudWxsKSB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCB0aGUgXCIke2tleX1cIiBvcHRpb24gdG8gYmUgYSBmdW5jdGlvbmApO1xuXHRpZiAocmVxdWlyZWQpIHRocm93IG5ldyBUeXBlRXJyb3IoYE1pc3NpbmcgcmVxdWlyZWQgb3B0aW9uIFwiJHtrZXl9XCJgKTtcblx0cmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCBnZXRMZW5ndGggPSAoeyBsZW5ndGggfSkgPT4ge1xuXHRpZiAoTnVtYmVyLmlzSW50ZWdlcihsZW5ndGgpICYmIGxlbmd0aCA+PSAwKSByZXR1cm4gbGVuZ3RoO1xuXHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBmdW5jdGlvbi5sZW5ndGggdG8gYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJyk7XG59O1xuIl0sIm5hbWVzIjpbImdldEJvb2xlYW5PcHRpb24iLCJjcHBkYiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmaW5lQWdncmVnYXRlIiwibmFtZSIsIm9wdGlvbnMiLCJUeXBlRXJyb3IiLCJzdGFydCIsInN0ZXAiLCJnZXRGdW5jdGlvbk9wdGlvbiIsImludmVyc2UiLCJyZXN1bHQiLCJzYWZlSW50ZWdlcnMiLCJkZXRlcm1pbmlzdGljIiwiZGlyZWN0T25seSIsInZhcmFyZ3MiLCJhcmdDb3VudCIsIk1hdGgiLCJtYXgiLCJnZXRMZW5ndGgiLCJSYW5nZUVycm9yIiwiYWdncmVnYXRlIiwia2V5IiwicmVxdWlyZWQiLCJ2YWx1ZSIsImxlbmd0aCIsIk51bWJlciIsImlzSW50ZWdlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-sqlite3/lib/methods/aggregate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-sqlite3/lib/methods/backup.js":
/*!***********************************************************!*\
  !*** ./node_modules/better-sqlite3/lib/methods/backup.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst { cppdb } = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/better-sqlite3/lib/util.js\");\nconst fsAccess = promisify(fs.access);\nmodule.exports = async function backup(filename, options) {\n    if (options == null) options = {};\n    // Validate arguments\n    if (typeof filename !== \"string\") throw new TypeError(\"Expected first argument to be a string\");\n    if (typeof options !== \"object\") throw new TypeError(\"Expected second argument to be an options object\");\n    // Interpret options\n    filename = filename.trim();\n    const attachedName = \"attached\" in options ? options.attached : \"main\";\n    const handler = \"progress\" in options ? options.progress : null;\n    // Validate interpreted options\n    if (!filename) throw new TypeError(\"Backup filename cannot be an empty string\");\n    if (filename === \":memory:\") throw new TypeError('Invalid backup filename \":memory:\"');\n    if (typeof attachedName !== \"string\") throw new TypeError('Expected the \"attached\" option to be a string');\n    if (!attachedName) throw new TypeError('The \"attached\" option cannot be an empty string');\n    if (handler != null && typeof handler !== \"function\") throw new TypeError('Expected the \"progress\" option to be a function');\n    // Make sure the specified directory exists\n    await fsAccess(path.dirname(filename)).catch(()=>{\n        throw new TypeError(\"Cannot save backup because the directory does not exist\");\n    });\n    const isNewFile = await fsAccess(filename).then(()=>false, ()=>true);\n    return runBackup(this[cppdb].backup(this, attachedName, filename, isNewFile), handler || null);\n};\nconst runBackup = (backup, handler)=>{\n    let rate = 0;\n    let useDefault = true;\n    return new Promise((resolve, reject)=>{\n        setImmediate(function step() {\n            try {\n                const progress = backup.transfer(rate);\n                if (!progress.remainingPages) {\n                    backup.close();\n                    resolve(progress);\n                    return;\n                }\n                if (useDefault) {\n                    useDefault = false;\n                    rate = 100;\n                }\n                if (handler) {\n                    const ret = handler(progress);\n                    if (ret !== undefined) {\n                        if (typeof ret === \"number\" && ret === ret) rate = Math.max(0, Math.min(0x7fffffff, Math.round(ret)));\n                        else throw new TypeError(\"Expected progress callback to return a number or undefined\");\n                    }\n                }\n                setImmediate(step);\n            } catch (err) {\n                backup.close();\n                reject(err);\n            }\n        });\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvYmFja3VwLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTUEsS0FBS0MsbUJBQU9BLENBQUM7QUFDbkIsTUFBTUMsT0FBT0QsbUJBQU9BLENBQUM7QUFDckIsTUFBTSxFQUFFRSxTQUFTLEVBQUUsR0FBR0YsbUJBQU9BLENBQUM7QUFDOUIsTUFBTSxFQUFFRyxLQUFLLEVBQUUsR0FBR0gsbUJBQU9BLENBQUM7QUFDMUIsTUFBTUksV0FBV0YsVUFBVUgsR0FBR00sTUFBTTtBQUVwQ0MsT0FBT0MsT0FBTyxHQUFHLGVBQWVDLE9BQU9DLFFBQVEsRUFBRUMsT0FBTztJQUN2RCxJQUFJQSxXQUFXLE1BQU1BLFVBQVUsQ0FBQztJQUVoQyxxQkFBcUI7SUFDckIsSUFBSSxPQUFPRCxhQUFhLFVBQVUsTUFBTSxJQUFJRSxVQUFVO0lBQ3RELElBQUksT0FBT0QsWUFBWSxVQUFVLE1BQU0sSUFBSUMsVUFBVTtJQUVyRCxvQkFBb0I7SUFDcEJGLFdBQVdBLFNBQVNHLElBQUk7SUFDeEIsTUFBTUMsZUFBZSxjQUFjSCxVQUFVQSxRQUFRSSxRQUFRLEdBQUc7SUFDaEUsTUFBTUMsVUFBVSxjQUFjTCxVQUFVQSxRQUFRTSxRQUFRLEdBQUc7SUFFM0QsK0JBQStCO0lBQy9CLElBQUksQ0FBQ1AsVUFBVSxNQUFNLElBQUlFLFVBQVU7SUFDbkMsSUFBSUYsYUFBYSxZQUFZLE1BQU0sSUFBSUUsVUFBVTtJQUNqRCxJQUFJLE9BQU9FLGlCQUFpQixVQUFVLE1BQU0sSUFBSUYsVUFBVTtJQUMxRCxJQUFJLENBQUNFLGNBQWMsTUFBTSxJQUFJRixVQUFVO0lBQ3ZDLElBQUlJLFdBQVcsUUFBUSxPQUFPQSxZQUFZLFlBQVksTUFBTSxJQUFJSixVQUFVO0lBRTFFLDJDQUEyQztJQUMzQyxNQUFNUCxTQUFTSCxLQUFLZ0IsT0FBTyxDQUFDUixXQUFXUyxLQUFLLENBQUM7UUFDNUMsTUFBTSxJQUFJUCxVQUFVO0lBQ3JCO0lBRUEsTUFBTVEsWUFBWSxNQUFNZixTQUFTSyxVQUFVVyxJQUFJLENBQUMsSUFBTSxPQUFPLElBQU07SUFDbkUsT0FBT0MsVUFBVSxJQUFJLENBQUNsQixNQUFNLENBQUNLLE1BQU0sQ0FBQyxJQUFJLEVBQUVLLGNBQWNKLFVBQVVVLFlBQVlKLFdBQVc7QUFDMUY7QUFFQSxNQUFNTSxZQUFZLENBQUNiLFFBQVFPO0lBQzFCLElBQUlPLE9BQU87SUFDWCxJQUFJQyxhQUFhO0lBRWpCLE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxTQUFTQztRQUM1QkMsYUFBYSxTQUFTQztZQUNyQixJQUFJO2dCQUNILE1BQU1aLFdBQVdSLE9BQU9xQixRQUFRLENBQUNQO2dCQUNqQyxJQUFJLENBQUNOLFNBQVNjLGNBQWMsRUFBRTtvQkFDN0J0QixPQUFPdUIsS0FBSztvQkFDWk4sUUFBUVQ7b0JBQ1I7Z0JBQ0Q7Z0JBQ0EsSUFBSU8sWUFBWTtvQkFDZkEsYUFBYTtvQkFDYkQsT0FBTztnQkFDUjtnQkFDQSxJQUFJUCxTQUFTO29CQUNaLE1BQU1pQixNQUFNakIsUUFBUUM7b0JBQ3BCLElBQUlnQixRQUFRQyxXQUFXO3dCQUN0QixJQUFJLE9BQU9ELFFBQVEsWUFBWUEsUUFBUUEsS0FBS1YsT0FBT1ksS0FBS0MsR0FBRyxDQUFDLEdBQUdELEtBQUtFLEdBQUcsQ0FBQyxZQUFZRixLQUFLRyxLQUFLLENBQUNMOzZCQUMxRixNQUFNLElBQUlyQixVQUFVO29CQUMxQjtnQkFDRDtnQkFDQWdCLGFBQWFDO1lBQ2QsRUFBRSxPQUFPVSxLQUFLO2dCQUNiOUIsT0FBT3VCLEtBQUs7Z0JBQ1pMLE9BQU9ZO1lBQ1I7UUFDRDtJQUNEO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvYmFja3VwLmpzP2M4NTciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgcHJvbWlzaWZ5IH0gPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCB7IGNwcGRiIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5jb25zdCBmc0FjY2VzcyA9IHByb21pc2lmeShmcy5hY2Nlc3MpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIGZ1bmN0aW9uIGJhY2t1cChmaWxlbmFtZSwgb3B0aW9ucykge1xuXHRpZiAob3B0aW9ucyA9PSBudWxsKSBvcHRpb25zID0ge307XG5cblx0Ly8gVmFsaWRhdGUgYXJndW1lbnRzXG5cdGlmICh0eXBlb2YgZmlsZW5hbWUgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBmaXJzdCBhcmd1bWVudCB0byBiZSBhIHN0cmluZycpO1xuXHRpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBzZWNvbmQgYXJndW1lbnQgdG8gYmUgYW4gb3B0aW9ucyBvYmplY3QnKTtcblxuXHQvLyBJbnRlcnByZXQgb3B0aW9uc1xuXHRmaWxlbmFtZSA9IGZpbGVuYW1lLnRyaW0oKTtcblx0Y29uc3QgYXR0YWNoZWROYW1lID0gJ2F0dGFjaGVkJyBpbiBvcHRpb25zID8gb3B0aW9ucy5hdHRhY2hlZCA6ICdtYWluJztcblx0Y29uc3QgaGFuZGxlciA9ICdwcm9ncmVzcycgaW4gb3B0aW9ucyA/IG9wdGlvbnMucHJvZ3Jlc3MgOiBudWxsO1xuXG5cdC8vIFZhbGlkYXRlIGludGVycHJldGVkIG9wdGlvbnNcblx0aWYgKCFmaWxlbmFtZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFja3VwIGZpbGVuYW1lIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcnKTtcblx0aWYgKGZpbGVuYW1lID09PSAnOm1lbW9yeTonKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGJhY2t1cCBmaWxlbmFtZSBcIjptZW1vcnk6XCInKTtcblx0aWYgKHR5cGVvZiBhdHRhY2hlZE5hbWUgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgXCJhdHRhY2hlZFwiIG9wdGlvbiB0byBiZSBhIHN0cmluZycpO1xuXHRpZiAoIWF0dGFjaGVkTmFtZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiYXR0YWNoZWRcIiBvcHRpb24gY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZycpO1xuXHRpZiAoaGFuZGxlciAhPSBudWxsICYmIHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgXCJwcm9ncmVzc1wiIG9wdGlvbiB0byBiZSBhIGZ1bmN0aW9uJyk7XG5cblx0Ly8gTWFrZSBzdXJlIHRoZSBzcGVjaWZpZWQgZGlyZWN0b3J5IGV4aXN0c1xuXHRhd2FpdCBmc0FjY2VzcyhwYXRoLmRpcm5hbWUoZmlsZW5hbWUpKS5jYXRjaCgoKSA9PiB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IHNhdmUgYmFja3VwIGJlY2F1c2UgdGhlIGRpcmVjdG9yeSBkb2VzIG5vdCBleGlzdCcpO1xuXHR9KTtcblxuXHRjb25zdCBpc05ld0ZpbGUgPSBhd2FpdCBmc0FjY2VzcyhmaWxlbmFtZSkudGhlbigoKSA9PiBmYWxzZSwgKCkgPT4gdHJ1ZSk7XG5cdHJldHVybiBydW5CYWNrdXAodGhpc1tjcHBkYl0uYmFja3VwKHRoaXMsIGF0dGFjaGVkTmFtZSwgZmlsZW5hbWUsIGlzTmV3RmlsZSksIGhhbmRsZXIgfHwgbnVsbCk7XG59O1xuXG5jb25zdCBydW5CYWNrdXAgPSAoYmFja3VwLCBoYW5kbGVyKSA9PiB7XG5cdGxldCByYXRlID0gMDtcblx0bGV0IHVzZURlZmF1bHQgPSB0cnVlO1xuXG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0c2V0SW1tZWRpYXRlKGZ1bmN0aW9uIHN0ZXAoKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb25zdCBwcm9ncmVzcyA9IGJhY2t1cC50cmFuc2ZlcihyYXRlKTtcblx0XHRcdFx0aWYgKCFwcm9ncmVzcy5yZW1haW5pbmdQYWdlcykge1xuXHRcdFx0XHRcdGJhY2t1cC5jbG9zZSgpO1xuXHRcdFx0XHRcdHJlc29sdmUocHJvZ3Jlc3MpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodXNlRGVmYXVsdCkge1xuXHRcdFx0XHRcdHVzZURlZmF1bHQgPSBmYWxzZTtcblx0XHRcdFx0XHRyYXRlID0gMTAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChoYW5kbGVyKSB7XG5cdFx0XHRcdFx0Y29uc3QgcmV0ID0gaGFuZGxlcihwcm9ncmVzcyk7XG5cdFx0XHRcdFx0aWYgKHJldCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIHJldCA9PT0gJ251bWJlcicgJiYgcmV0ID09PSByZXQpIHJhdGUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigweDdmZmZmZmZmLCBNYXRoLnJvdW5kKHJldCkpKTtcblx0XHRcdFx0XHRcdGVsc2UgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgcHJvZ3Jlc3MgY2FsbGJhY2sgdG8gcmV0dXJuIGEgbnVtYmVyIG9yIHVuZGVmaW5lZCcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzZXRJbW1lZGlhdGUoc3RlcCk7XG5cdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0YmFja3VwLmNsb3NlKCk7XG5cdFx0XHRcdHJlamVjdChlcnIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn07XG4iXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwicGF0aCIsInByb21pc2lmeSIsImNwcGRiIiwiZnNBY2Nlc3MiLCJhY2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwiYmFja3VwIiwiZmlsZW5hbWUiLCJvcHRpb25zIiwiVHlwZUVycm9yIiwidHJpbSIsImF0dGFjaGVkTmFtZSIsImF0dGFjaGVkIiwiaGFuZGxlciIsInByb2dyZXNzIiwiZGlybmFtZSIsImNhdGNoIiwiaXNOZXdGaWxlIiwidGhlbiIsInJ1bkJhY2t1cCIsInJhdGUiLCJ1c2VEZWZhdWx0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzZXRJbW1lZGlhdGUiLCJzdGVwIiwidHJhbnNmZXIiLCJyZW1haW5pbmdQYWdlcyIsImNsb3NlIiwicmV0IiwidW5kZWZpbmVkIiwiTWF0aCIsIm1heCIsIm1pbiIsInJvdW5kIiwiZXJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-sqlite3/lib/methods/backup.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-sqlite3/lib/methods/function.js":
/*!*************************************************************!*\
  !*** ./node_modules/better-sqlite3/lib/methods/function.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { getBooleanOption, cppdb } = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/better-sqlite3/lib/util.js\");\nmodule.exports = function defineFunction(name, options, fn) {\n    // Apply defaults\n    if (options == null) options = {};\n    if (typeof options === \"function\") {\n        fn = options;\n        options = {};\n    }\n    // Validate arguments\n    if (typeof name !== \"string\") throw new TypeError(\"Expected first argument to be a string\");\n    if (typeof fn !== \"function\") throw new TypeError(\"Expected last argument to be a function\");\n    if (typeof options !== \"object\") throw new TypeError(\"Expected second argument to be an options object\");\n    if (!name) throw new TypeError(\"User-defined function name cannot be an empty string\");\n    // Interpret options\n    const safeIntegers = \"safeIntegers\" in options ? +getBooleanOption(options, \"safeIntegers\") : 2;\n    const deterministic = getBooleanOption(options, \"deterministic\");\n    const directOnly = getBooleanOption(options, \"directOnly\");\n    const varargs = getBooleanOption(options, \"varargs\");\n    let argCount = -1;\n    // Determine argument count\n    if (!varargs) {\n        argCount = fn.length;\n        if (!Number.isInteger(argCount) || argCount < 0) throw new TypeError(\"Expected function.length to be a positive integer\");\n        if (argCount > 100) throw new RangeError(\"User-defined functions cannot have more than 100 arguments\");\n    }\n    this[cppdb].function(fn, name, argCount, safeIntegers, deterministic, directOnly);\n    return this;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvZnVuY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNLEVBQUVBLGdCQUFnQixFQUFFQyxLQUFLLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFFNUNDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxlQUFlQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsRUFBRTtJQUN6RCxpQkFBaUI7SUFDakIsSUFBSUQsV0FBVyxNQUFNQSxVQUFVLENBQUM7SUFDaEMsSUFBSSxPQUFPQSxZQUFZLFlBQVk7UUFBRUMsS0FBS0Q7UUFBU0EsVUFBVSxDQUFDO0lBQUc7SUFFakUscUJBQXFCO0lBQ3JCLElBQUksT0FBT0QsU0FBUyxVQUFVLE1BQU0sSUFBSUcsVUFBVTtJQUNsRCxJQUFJLE9BQU9ELE9BQU8sWUFBWSxNQUFNLElBQUlDLFVBQVU7SUFDbEQsSUFBSSxPQUFPRixZQUFZLFVBQVUsTUFBTSxJQUFJRSxVQUFVO0lBQ3JELElBQUksQ0FBQ0gsTUFBTSxNQUFNLElBQUlHLFVBQVU7SUFFL0Isb0JBQW9CO0lBQ3BCLE1BQU1DLGVBQWUsa0JBQWtCSCxVQUFVLENBQUNQLGlCQUFpQk8sU0FBUyxrQkFBa0I7SUFDOUYsTUFBTUksZ0JBQWdCWCxpQkFBaUJPLFNBQVM7SUFDaEQsTUFBTUssYUFBYVosaUJBQWlCTyxTQUFTO0lBQzdDLE1BQU1NLFVBQVViLGlCQUFpQk8sU0FBUztJQUMxQyxJQUFJTyxXQUFXLENBQUM7SUFFaEIsMkJBQTJCO0lBQzNCLElBQUksQ0FBQ0QsU0FBUztRQUNiQyxXQUFXTixHQUFHTyxNQUFNO1FBQ3BCLElBQUksQ0FBQ0MsT0FBT0MsU0FBUyxDQUFDSCxhQUFhQSxXQUFXLEdBQUcsTUFBTSxJQUFJTCxVQUFVO1FBQ3JFLElBQUlLLFdBQVcsS0FBSyxNQUFNLElBQUlJLFdBQVc7SUFDMUM7SUFFQSxJQUFJLENBQUNqQixNQUFNLENBQUNrQixRQUFRLENBQUNYLElBQUlGLE1BQU1RLFVBQVVKLGNBQWNDLGVBQWVDO0lBQ3RFLE9BQU8sSUFBSTtBQUNaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL2JldHRlci1zcWxpdGUzL2xpYi9tZXRob2RzL2Z1bmN0aW9uLmpzPzA4NjEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgeyBnZXRCb29sZWFuT3B0aW9uLCBjcHBkYiB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZUZ1bmN0aW9uKG5hbWUsIG9wdGlvbnMsIGZuKSB7XG5cdC8vIEFwcGx5IGRlZmF1bHRzXG5cdGlmIChvcHRpb25zID09IG51bGwpIG9wdGlvbnMgPSB7fTtcblx0aWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7IGZuID0gb3B0aW9uczsgb3B0aW9ucyA9IHt9OyB9XG5cblx0Ly8gVmFsaWRhdGUgYXJndW1lbnRzXG5cdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGEgc3RyaW5nJyk7XG5cdGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGxhc3QgYXJndW1lbnQgdG8gYmUgYSBmdW5jdGlvbicpO1xuXHRpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBzZWNvbmQgYXJndW1lbnQgdG8gYmUgYW4gb3B0aW9ucyBvYmplY3QnKTtcblx0aWYgKCFuYW1lKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVc2VyLWRlZmluZWQgZnVuY3Rpb24gbmFtZSBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nJyk7XG5cblx0Ly8gSW50ZXJwcmV0IG9wdGlvbnNcblx0Y29uc3Qgc2FmZUludGVnZXJzID0gJ3NhZmVJbnRlZ2VycycgaW4gb3B0aW9ucyA/ICtnZXRCb29sZWFuT3B0aW9uKG9wdGlvbnMsICdzYWZlSW50ZWdlcnMnKSA6IDI7XG5cdGNvbnN0IGRldGVybWluaXN0aWMgPSBnZXRCb29sZWFuT3B0aW9uKG9wdGlvbnMsICdkZXRlcm1pbmlzdGljJyk7XG5cdGNvbnN0IGRpcmVjdE9ubHkgPSBnZXRCb29sZWFuT3B0aW9uKG9wdGlvbnMsICdkaXJlY3RPbmx5Jyk7XG5cdGNvbnN0IHZhcmFyZ3MgPSBnZXRCb29sZWFuT3B0aW9uKG9wdGlvbnMsICd2YXJhcmdzJyk7XG5cdGxldCBhcmdDb3VudCA9IC0xO1xuXG5cdC8vIERldGVybWluZSBhcmd1bWVudCBjb3VudFxuXHRpZiAoIXZhcmFyZ3MpIHtcblx0XHRhcmdDb3VudCA9IGZuLmxlbmd0aDtcblx0XHRpZiAoIU51bWJlci5pc0ludGVnZXIoYXJnQ291bnQpIHx8IGFyZ0NvdW50IDwgMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgZnVuY3Rpb24ubGVuZ3RoIHRvIGJlIGEgcG9zaXRpdmUgaW50ZWdlcicpO1xuXHRcdGlmIChhcmdDb3VudCA+IDEwMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1VzZXItZGVmaW5lZCBmdW5jdGlvbnMgY2Fubm90IGhhdmUgbW9yZSB0aGFuIDEwMCBhcmd1bWVudHMnKTtcblx0fVxuXG5cdHRoaXNbY3BwZGJdLmZ1bmN0aW9uKGZuLCBuYW1lLCBhcmdDb3VudCwgc2FmZUludGVnZXJzLCBkZXRlcm1pbmlzdGljLCBkaXJlY3RPbmx5KTtcblx0cmV0dXJuIHRoaXM7XG59O1xuIl0sIm5hbWVzIjpbImdldEJvb2xlYW5PcHRpb24iLCJjcHBkYiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmaW5lRnVuY3Rpb24iLCJuYW1lIiwib3B0aW9ucyIsImZuIiwiVHlwZUVycm9yIiwic2FmZUludGVnZXJzIiwiZGV0ZXJtaW5pc3RpYyIsImRpcmVjdE9ubHkiLCJ2YXJhcmdzIiwiYXJnQ291bnQiLCJsZW5ndGgiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJSYW5nZUVycm9yIiwiZnVuY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-sqlite3/lib/methods/function.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-sqlite3/lib/methods/inspect.js":
/*!************************************************************!*\
  !*** ./node_modules/better-sqlite3/lib/methods/inspect.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\nconst DatabaseInspection = function Database() {};\nmodule.exports = function inspect(depth, opts) {\n    return Object.assign(new DatabaseInspection(), this);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvaW5zcGVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU1BLHFCQUFxQixTQUFTQyxZQUFZO0FBRWhEQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsUUFBUUMsS0FBSyxFQUFFQyxJQUFJO0lBQzVDLE9BQU9DLE9BQU9DLE1BQU0sQ0FBQyxJQUFJUixzQkFBc0IsSUFBSTtBQUNwRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy9pbnNwZWN0LmpzPzU3YzUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgRGF0YWJhc2VJbnNwZWN0aW9uID0gZnVuY3Rpb24gRGF0YWJhc2UoKSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbnNwZWN0KGRlcHRoLCBvcHRzKSB7XG5cdHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBEYXRhYmFzZUluc3BlY3Rpb24oKSwgdGhpcyk7XG59O1xuXG4iXSwibmFtZXMiOlsiRGF0YWJhc2VJbnNwZWN0aW9uIiwiRGF0YWJhc2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5zcGVjdCIsImRlcHRoIiwib3B0cyIsIk9iamVjdCIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-sqlite3/lib/methods/inspect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-sqlite3/lib/methods/pragma.js":
/*!***********************************************************!*\
  !*** ./node_modules/better-sqlite3/lib/methods/pragma.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { getBooleanOption, cppdb } = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/better-sqlite3/lib/util.js\");\nmodule.exports = function pragma(source, options) {\n    if (options == null) options = {};\n    if (typeof source !== \"string\") throw new TypeError(\"Expected first argument to be a string\");\n    if (typeof options !== \"object\") throw new TypeError(\"Expected second argument to be an options object\");\n    const simple = getBooleanOption(options, \"simple\");\n    const stmt = this[cppdb].prepare(`PRAGMA ${source}`, this, true);\n    return simple ? stmt.pluck().get() : stmt.all();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvcHJhZ21hLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTSxFQUFFQSxnQkFBZ0IsRUFBRUMsS0FBSyxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBRTVDQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsT0FBT0MsTUFBTSxFQUFFQyxPQUFPO0lBQy9DLElBQUlBLFdBQVcsTUFBTUEsVUFBVSxDQUFDO0lBQ2hDLElBQUksT0FBT0QsV0FBVyxVQUFVLE1BQU0sSUFBSUUsVUFBVTtJQUNwRCxJQUFJLE9BQU9ELFlBQVksVUFBVSxNQUFNLElBQUlDLFVBQVU7SUFDckQsTUFBTUMsU0FBU1QsaUJBQWlCTyxTQUFTO0lBRXpDLE1BQU1HLE9BQU8sSUFBSSxDQUFDVCxNQUFNLENBQUNVLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRUwsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFO0lBQzNELE9BQU9HLFNBQVNDLEtBQUtFLEtBQUssR0FBR0MsR0FBRyxLQUFLSCxLQUFLSSxHQUFHO0FBQzlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL2JldHRlci1zcWxpdGUzL2xpYi9tZXRob2RzL3ByYWdtYS5qcz80YTM0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IHsgZ2V0Qm9vbGVhbk9wdGlvbiwgY3BwZGIgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwcmFnbWEoc291cmNlLCBvcHRpb25zKSB7XG5cdGlmIChvcHRpb25zID09IG51bGwpIG9wdGlvbnMgPSB7fTtcblx0aWYgKHR5cGVvZiBzb3VyY2UgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBmaXJzdCBhcmd1bWVudCB0byBiZSBhIHN0cmluZycpO1xuXHRpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBzZWNvbmQgYXJndW1lbnQgdG8gYmUgYW4gb3B0aW9ucyBvYmplY3QnKTtcblx0Y29uc3Qgc2ltcGxlID0gZ2V0Qm9vbGVhbk9wdGlvbihvcHRpb25zLCAnc2ltcGxlJyk7XG5cblx0Y29uc3Qgc3RtdCA9IHRoaXNbY3BwZGJdLnByZXBhcmUoYFBSQUdNQSAke3NvdXJjZX1gLCB0aGlzLCB0cnVlKTtcblx0cmV0dXJuIHNpbXBsZSA/IHN0bXQucGx1Y2soKS5nZXQoKSA6IHN0bXQuYWxsKCk7XG59O1xuIl0sIm5hbWVzIjpbImdldEJvb2xlYW5PcHRpb24iLCJjcHBkYiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwicHJhZ21hIiwic291cmNlIiwib3B0aW9ucyIsIlR5cGVFcnJvciIsInNpbXBsZSIsInN0bXQiLCJwcmVwYXJlIiwicGx1Y2siLCJnZXQiLCJhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-sqlite3/lib/methods/pragma.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-sqlite3/lib/methods/serialize.js":
/*!**************************************************************!*\
  !*** ./node_modules/better-sqlite3/lib/methods/serialize.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { cppdb } = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/better-sqlite3/lib/util.js\");\nmodule.exports = function serialize(options) {\n    if (options == null) options = {};\n    // Validate arguments\n    if (typeof options !== \"object\") throw new TypeError(\"Expected first argument to be an options object\");\n    // Interpret and validate options\n    const attachedName = \"attached\" in options ? options.attached : \"main\";\n    if (typeof attachedName !== \"string\") throw new TypeError('Expected the \"attached\" option to be a string');\n    if (!attachedName) throw new TypeError('The \"attached\" option cannot be an empty string');\n    return this[cppdb].serialize(attachedName);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvc2VyaWFsaXplLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTSxFQUFFQSxLQUFLLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFFMUJDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxVQUFVQyxPQUFPO0lBQzFDLElBQUlBLFdBQVcsTUFBTUEsVUFBVSxDQUFDO0lBRWhDLHFCQUFxQjtJQUNyQixJQUFJLE9BQU9BLFlBQVksVUFBVSxNQUFNLElBQUlDLFVBQVU7SUFFckQsaUNBQWlDO0lBQ2pDLE1BQU1DLGVBQWUsY0FBY0YsVUFBVUEsUUFBUUcsUUFBUSxHQUFHO0lBQ2hFLElBQUksT0FBT0QsaUJBQWlCLFVBQVUsTUFBTSxJQUFJRCxVQUFVO0lBQzFELElBQUksQ0FBQ0MsY0FBYyxNQUFNLElBQUlELFVBQVU7SUFFdkMsT0FBTyxJQUFJLENBQUNOLE1BQU0sQ0FBQ0ksU0FBUyxDQUFDRztBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy9zZXJpYWxpemUuanM/YzQ4NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7IGNwcGRiIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2VyaWFsaXplKG9wdGlvbnMpIHtcblx0aWYgKG9wdGlvbnMgPT0gbnVsbCkgb3B0aW9ucyA9IHt9O1xuXG5cdC8vIFZhbGlkYXRlIGFyZ3VtZW50c1xuXHRpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvcHRpb25zIG9iamVjdCcpO1xuXG5cdC8vIEludGVycHJldCBhbmQgdmFsaWRhdGUgb3B0aW9uc1xuXHRjb25zdCBhdHRhY2hlZE5hbWUgPSAnYXR0YWNoZWQnIGluIG9wdGlvbnMgPyBvcHRpb25zLmF0dGFjaGVkIDogJ21haW4nO1xuXHRpZiAodHlwZW9mIGF0dGFjaGVkTmFtZSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBcImF0dGFjaGVkXCIgb3B0aW9uIHRvIGJlIGEgc3RyaW5nJyk7XG5cdGlmICghYXR0YWNoZWROYW1lKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJhdHRhY2hlZFwiIG9wdGlvbiBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nJyk7XG5cblx0cmV0dXJuIHRoaXNbY3BwZGJdLnNlcmlhbGl6ZShhdHRhY2hlZE5hbWUpO1xufTtcbiJdLCJuYW1lcyI6WyJjcHBkYiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VyaWFsaXplIiwib3B0aW9ucyIsIlR5cGVFcnJvciIsImF0dGFjaGVkTmFtZSIsImF0dGFjaGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-sqlite3/lib/methods/serialize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-sqlite3/lib/methods/table.js":
/*!**********************************************************!*\
  !*** ./node_modules/better-sqlite3/lib/methods/table.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { cppdb } = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/better-sqlite3/lib/util.js\");\nmodule.exports = function defineTable(name, factory) {\n    // Validate arguments\n    if (typeof name !== \"string\") throw new TypeError(\"Expected first argument to be a string\");\n    if (!name) throw new TypeError(\"Virtual table module name cannot be an empty string\");\n    // Determine whether the module is eponymous-only or not\n    let eponymous = false;\n    if (typeof factory === \"object\" && factory !== null) {\n        eponymous = true;\n        factory = defer(parseTableDefinition(factory, \"used\", name));\n    } else {\n        if (typeof factory !== \"function\") throw new TypeError(\"Expected second argument to be a function or a table definition object\");\n        factory = wrapFactory(factory);\n    }\n    this[cppdb].table(factory, name, eponymous);\n    return this;\n};\nfunction wrapFactory(factory) {\n    return function virtualTableFactory(moduleName, databaseName, tableName, ...args) {\n        const thisObject = {\n            module: moduleName,\n            database: databaseName,\n            table: tableName\n        };\n        // Generate a new table definition by invoking the factory\n        const def = apply.call(factory, thisObject, args);\n        if (typeof def !== \"object\" || def === null) {\n            throw new TypeError(`Virtual table module \"${moduleName}\" did not return a table definition object`);\n        }\n        return parseTableDefinition(def, \"returned\", moduleName);\n    };\n}\nfunction parseTableDefinition(def, verb, moduleName) {\n    // Validate required properties\n    if (!hasOwnProperty.call(def, \"rows\")) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"rows\" property`);\n    }\n    if (!hasOwnProperty.call(def, \"columns\")) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"columns\" property`);\n    }\n    // Validate \"rows\" property\n    const rows = def.rows;\n    if (typeof rows !== \"function\" || Object.getPrototypeOf(rows) !== GeneratorFunctionPrototype) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"rows\" property (should be a generator function)`);\n    }\n    // Validate \"columns\" property\n    let columns = def.columns;\n    if (!Array.isArray(columns) || !(columns = [\n        ...columns\n    ]).every((x)=>typeof x === \"string\")) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"columns\" property (should be an array of strings)`);\n    }\n    if (columns.length !== new Set(columns).size) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate column names`);\n    }\n    if (!columns.length) {\n        throw new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with zero columns`);\n    }\n    // Validate \"parameters\" property\n    let parameters;\n    if (hasOwnProperty.call(def, \"parameters\")) {\n        parameters = def.parameters;\n        if (!Array.isArray(parameters) || !(parameters = [\n            ...parameters\n        ]).every((x)=>typeof x === \"string\")) {\n            throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"parameters\" property (should be an array of strings)`);\n        }\n    } else {\n        parameters = inferParameters(rows);\n    }\n    if (parameters.length !== new Set(parameters).size) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate parameter names`);\n    }\n    if (parameters.length > 32) {\n        throw new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with more than the maximum number of 32 parameters`);\n    }\n    for (const parameter of parameters){\n        if (columns.includes(parameter)) {\n            throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with column \"${parameter}\" which was ambiguously defined as both a column and parameter`);\n        }\n    }\n    // Validate \"safeIntegers\" option\n    let safeIntegers = 2;\n    if (hasOwnProperty.call(def, \"safeIntegers\")) {\n        const bool = def.safeIntegers;\n        if (typeof bool !== \"boolean\") {\n            throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"safeIntegers\" property (should be a boolean)`);\n        }\n        safeIntegers = +bool;\n    }\n    // Validate \"directOnly\" option\n    let directOnly = false;\n    if (hasOwnProperty.call(def, \"directOnly\")) {\n        directOnly = def.directOnly;\n        if (typeof directOnly !== \"boolean\") {\n            throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"directOnly\" property (should be a boolean)`);\n        }\n    }\n    // Generate SQL for the virtual table definition\n    const columnDefinitions = [\n        ...parameters.map(identifier).map((str)=>`${str} HIDDEN`),\n        ...columns.map(identifier)\n    ];\n    return [\n        `CREATE TABLE x(${columnDefinitions.join(\", \")});`,\n        wrapGenerator(rows, new Map(columns.map((x, i)=>[\n                x,\n                parameters.length + i\n            ])), moduleName),\n        parameters,\n        safeIntegers,\n        directOnly\n    ];\n}\nfunction wrapGenerator(generator, columnMap, moduleName) {\n    return function* virtualTable(...args) {\n        /*\n\t\t\tWe must defensively clone any buffers in the arguments, because\n\t\t\totherwise the generator could mutate one of them, which would cause\n\t\t\tus to return incorrect values for hidden columns, potentially\n\t\t\tcorrupting the database.\n\t\t */ const output = args.map((x)=>Buffer.isBuffer(x) ? Buffer.from(x) : x);\n        for(let i = 0; i < columnMap.size; ++i){\n            output.push(null); // Fill with nulls to prevent gaps in array (v8 optimization)\n        }\n        for (const row of generator(...args)){\n            if (Array.isArray(row)) {\n                extractRowArray(row, output, columnMap.size, moduleName);\n                yield output;\n            } else if (typeof row === \"object\" && row !== null) {\n                extractRowObject(row, output, columnMap, moduleName);\n                yield output;\n            } else {\n                throw new TypeError(`Virtual table module \"${moduleName}\" yielded something that isn't a valid row object`);\n            }\n        }\n    };\n}\nfunction extractRowArray(row, output, columnCount, moduleName) {\n    if (row.length !== columnCount) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an incorrect number of columns`);\n    }\n    const offset = output.length - columnCount;\n    for(let i = 0; i < columnCount; ++i){\n        output[i + offset] = row[i];\n    }\n}\nfunction extractRowObject(row, output, columnMap, moduleName) {\n    let count = 0;\n    for (const key of Object.keys(row)){\n        const index = columnMap.get(key);\n        if (index === undefined) {\n            throw new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an undeclared column \"${key}\"`);\n        }\n        output[index] = row[key];\n        count += 1;\n    }\n    if (count !== columnMap.size) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" yielded a row with missing columns`);\n    }\n}\nfunction inferParameters({ length }) {\n    if (!Number.isInteger(length) || length < 0) {\n        throw new TypeError(\"Expected function.length to be a positive integer\");\n    }\n    const params = [];\n    for(let i = 0; i < length; ++i){\n        params.push(`$${i + 1}`);\n    }\n    return params;\n}\nconst { hasOwnProperty } = Object.prototype;\nconst { apply } = Function.prototype;\nconst GeneratorFunctionPrototype = Object.getPrototypeOf(function*() {});\nconst identifier = (str)=>`\"${str.replace(/\"/g, '\"\"')}\"`;\nconst defer = (x)=>()=>x;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-sqlite3/lib/methods/table.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-sqlite3/lib/methods/transaction.js":
/*!****************************************************************!*\
  !*** ./node_modules/better-sqlite3/lib/methods/transaction.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { cppdb } = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/better-sqlite3/lib/util.js\");\nconst controllers = new WeakMap();\nmodule.exports = function transaction(fn) {\n    if (typeof fn !== \"function\") throw new TypeError(\"Expected first argument to be a function\");\n    const db = this[cppdb];\n    const controller = getController(db, this);\n    const { apply } = Function.prototype;\n    // Each version of the transaction function has these same properties\n    const properties = {\n        default: {\n            value: wrapTransaction(apply, fn, db, controller.default)\n        },\n        deferred: {\n            value: wrapTransaction(apply, fn, db, controller.deferred)\n        },\n        immediate: {\n            value: wrapTransaction(apply, fn, db, controller.immediate)\n        },\n        exclusive: {\n            value: wrapTransaction(apply, fn, db, controller.exclusive)\n        },\n        database: {\n            value: this,\n            enumerable: true\n        }\n    };\n    Object.defineProperties(properties.default.value, properties);\n    Object.defineProperties(properties.deferred.value, properties);\n    Object.defineProperties(properties.immediate.value, properties);\n    Object.defineProperties(properties.exclusive.value, properties);\n    // Return the default version of the transaction function\n    return properties.default.value;\n};\n// Return the database's cached transaction controller, or create a new one\nconst getController = (db, self)=>{\n    let controller = controllers.get(db);\n    if (!controller) {\n        const shared = {\n            commit: db.prepare(\"COMMIT\", self, false),\n            rollback: db.prepare(\"ROLLBACK\", self, false),\n            savepoint: db.prepare(\"SAVEPOINT `\t_bs3.\t`\", self, false),\n            release: db.prepare(\"RELEASE `\t_bs3.\t`\", self, false),\n            rollbackTo: db.prepare(\"ROLLBACK TO `\t_bs3.\t`\", self, false)\n        };\n        controllers.set(db, controller = {\n            default: Object.assign({\n                begin: db.prepare(\"BEGIN\", self, false)\n            }, shared),\n            deferred: Object.assign({\n                begin: db.prepare(\"BEGIN DEFERRED\", self, false)\n            }, shared),\n            immediate: Object.assign({\n                begin: db.prepare(\"BEGIN IMMEDIATE\", self, false)\n            }, shared),\n            exclusive: Object.assign({\n                begin: db.prepare(\"BEGIN EXCLUSIVE\", self, false)\n            }, shared)\n        });\n    }\n    return controller;\n};\n// Return a new transaction function by wrapping the given function\nconst wrapTransaction = (apply, fn, db, { begin, commit, rollback, savepoint, release, rollbackTo })=>function sqliteTransaction() {\n        let before, after, undo;\n        if (db.inTransaction) {\n            before = savepoint;\n            after = release;\n            undo = rollbackTo;\n        } else {\n            before = begin;\n            after = commit;\n            undo = rollback;\n        }\n        before.run();\n        try {\n            const result = apply.call(fn, this, arguments);\n            after.run();\n            return result;\n        } catch (ex) {\n            if (db.inTransaction) {\n                undo.run();\n                if (undo !== rollback) after.run();\n            }\n            throw ex;\n        }\n    };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvdHJhbnNhY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNLEVBQUVBLEtBQUssRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUMxQixNQUFNQyxjQUFjLElBQUlDO0FBRXhCQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsWUFBWUMsRUFBRTtJQUN2QyxJQUFJLE9BQU9BLE9BQU8sWUFBWSxNQUFNLElBQUlDLFVBQVU7SUFFbEQsTUFBTUMsS0FBSyxJQUFJLENBQUNULE1BQU07SUFDdEIsTUFBTVUsYUFBYUMsY0FBY0YsSUFBSSxJQUFJO0lBQ3pDLE1BQU0sRUFBRUcsS0FBSyxFQUFFLEdBQUdDLFNBQVNDLFNBQVM7SUFFcEMscUVBQXFFO0lBQ3JFLE1BQU1DLGFBQWE7UUFDbEJDLFNBQVM7WUFBRUMsT0FBT0MsZ0JBQWdCTixPQUFPTCxJQUFJRSxJQUFJQyxXQUFXTSxPQUFPO1FBQUU7UUFDckVHLFVBQVU7WUFBRUYsT0FBT0MsZ0JBQWdCTixPQUFPTCxJQUFJRSxJQUFJQyxXQUFXUyxRQUFRO1FBQUU7UUFDdkVDLFdBQVc7WUFBRUgsT0FBT0MsZ0JBQWdCTixPQUFPTCxJQUFJRSxJQUFJQyxXQUFXVSxTQUFTO1FBQUU7UUFDekVDLFdBQVc7WUFBRUosT0FBT0MsZ0JBQWdCTixPQUFPTCxJQUFJRSxJQUFJQyxXQUFXVyxTQUFTO1FBQUU7UUFDekVDLFVBQVU7WUFBRUwsT0FBTyxJQUFJO1lBQUVNLFlBQVk7UUFBSztJQUMzQztJQUVBQyxPQUFPQyxnQkFBZ0IsQ0FBQ1YsV0FBV0MsT0FBTyxDQUFDQyxLQUFLLEVBQUVGO0lBQ2xEUyxPQUFPQyxnQkFBZ0IsQ0FBQ1YsV0FBV0ksUUFBUSxDQUFDRixLQUFLLEVBQUVGO0lBQ25EUyxPQUFPQyxnQkFBZ0IsQ0FBQ1YsV0FBV0ssU0FBUyxDQUFDSCxLQUFLLEVBQUVGO0lBQ3BEUyxPQUFPQyxnQkFBZ0IsQ0FBQ1YsV0FBV00sU0FBUyxDQUFDSixLQUFLLEVBQUVGO0lBRXBELHlEQUF5RDtJQUN6RCxPQUFPQSxXQUFXQyxPQUFPLENBQUNDLEtBQUs7QUFDaEM7QUFFQSwyRUFBMkU7QUFDM0UsTUFBTU4sZ0JBQWdCLENBQUNGLElBQUlpQjtJQUMxQixJQUFJaEIsYUFBYVIsWUFBWXlCLEdBQUcsQ0FBQ2xCO0lBQ2pDLElBQUksQ0FBQ0MsWUFBWTtRQUNoQixNQUFNa0IsU0FBUztZQUNkQyxRQUFRcEIsR0FBR3FCLE9BQU8sQ0FBQyxVQUFVSixNQUFNO1lBQ25DSyxVQUFVdEIsR0FBR3FCLE9BQU8sQ0FBQyxZQUFZSixNQUFNO1lBQ3ZDTSxXQUFXdkIsR0FBR3FCLE9BQU8sQ0FBQyx1QkFBeUJKLE1BQU07WUFDckRPLFNBQVN4QixHQUFHcUIsT0FBTyxDQUFDLHFCQUF1QkosTUFBTTtZQUNqRFEsWUFBWXpCLEdBQUdxQixPQUFPLENBQUMseUJBQTJCSixNQUFNO1FBQ3pEO1FBQ0F4QixZQUFZaUMsR0FBRyxDQUFDMUIsSUFBSUMsYUFBYTtZQUNoQ00sU0FBU1EsT0FBT1ksTUFBTSxDQUFDO2dCQUFFQyxPQUFPNUIsR0FBR3FCLE9BQU8sQ0FBQyxTQUFTSixNQUFNO1lBQU8sR0FBR0U7WUFDcEVULFVBQVVLLE9BQU9ZLE1BQU0sQ0FBQztnQkFBRUMsT0FBTzVCLEdBQUdxQixPQUFPLENBQUMsa0JBQWtCSixNQUFNO1lBQU8sR0FBR0U7WUFDOUVSLFdBQVdJLE9BQU9ZLE1BQU0sQ0FBQztnQkFBRUMsT0FBTzVCLEdBQUdxQixPQUFPLENBQUMsbUJBQW1CSixNQUFNO1lBQU8sR0FBR0U7WUFDaEZQLFdBQVdHLE9BQU9ZLE1BQU0sQ0FBQztnQkFBRUMsT0FBTzVCLEdBQUdxQixPQUFPLENBQUMsbUJBQW1CSixNQUFNO1lBQU8sR0FBR0U7UUFDakY7SUFDRDtJQUNBLE9BQU9sQjtBQUNSO0FBRUEsbUVBQW1FO0FBQ25FLE1BQU1RLGtCQUFrQixDQUFDTixPQUFPTCxJQUFJRSxJQUFJLEVBQUU0QixLQUFLLEVBQUVSLE1BQU0sRUFBRUUsUUFBUSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFLEdBQUssU0FBU0k7UUFDaEgsSUFBSUMsUUFBUUMsT0FBT0M7UUFDbkIsSUFBSWhDLEdBQUdpQyxhQUFhLEVBQUU7WUFDckJILFNBQVNQO1lBQ1RRLFFBQVFQO1lBQ1JRLE9BQU9QO1FBQ1IsT0FBTztZQUNOSyxTQUFTRjtZQUNURyxRQUFRWDtZQUNSWSxPQUFPVjtRQUNSO1FBQ0FRLE9BQU9JLEdBQUc7UUFDVixJQUFJO1lBQ0gsTUFBTUMsU0FBU2hDLE1BQU1pQyxJQUFJLENBQUN0QyxJQUFJLElBQUksRUFBRXVDO1lBQ3BDTixNQUFNRyxHQUFHO1lBQ1QsT0FBT0M7UUFDUixFQUFFLE9BQU9HLElBQUk7WUFDWixJQUFJdEMsR0FBR2lDLGFBQWEsRUFBRTtnQkFDckJELEtBQUtFLEdBQUc7Z0JBQ1IsSUFBSUYsU0FBU1YsVUFBVVMsTUFBTUcsR0FBRztZQUNqQztZQUNBLE1BQU1JO1FBQ1A7SUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy90cmFuc2FjdGlvbi5qcz8xZjAyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IHsgY3BwZGIgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbmNvbnN0IGNvbnRyb2xsZXJzID0gbmV3IFdlYWtNYXAoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2FjdGlvbihmbikge1xuXHRpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBmaXJzdCBhcmd1bWVudCB0byBiZSBhIGZ1bmN0aW9uJyk7XG5cblx0Y29uc3QgZGIgPSB0aGlzW2NwcGRiXTtcblx0Y29uc3QgY29udHJvbGxlciA9IGdldENvbnRyb2xsZXIoZGIsIHRoaXMpO1xuXHRjb25zdCB7IGFwcGx5IH0gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cblx0Ly8gRWFjaCB2ZXJzaW9uIG9mIHRoZSB0cmFuc2FjdGlvbiBmdW5jdGlvbiBoYXMgdGhlc2Ugc2FtZSBwcm9wZXJ0aWVzXG5cdGNvbnN0IHByb3BlcnRpZXMgPSB7XG5cdFx0ZGVmYXVsdDogeyB2YWx1ZTogd3JhcFRyYW5zYWN0aW9uKGFwcGx5LCBmbiwgZGIsIGNvbnRyb2xsZXIuZGVmYXVsdCkgfSxcblx0XHRkZWZlcnJlZDogeyB2YWx1ZTogd3JhcFRyYW5zYWN0aW9uKGFwcGx5LCBmbiwgZGIsIGNvbnRyb2xsZXIuZGVmZXJyZWQpIH0sXG5cdFx0aW1tZWRpYXRlOiB7IHZhbHVlOiB3cmFwVHJhbnNhY3Rpb24oYXBwbHksIGZuLCBkYiwgY29udHJvbGxlci5pbW1lZGlhdGUpIH0sXG5cdFx0ZXhjbHVzaXZlOiB7IHZhbHVlOiB3cmFwVHJhbnNhY3Rpb24oYXBwbHksIGZuLCBkYiwgY29udHJvbGxlci5leGNsdXNpdmUpIH0sXG5cdFx0ZGF0YWJhc2U6IHsgdmFsdWU6IHRoaXMsIGVudW1lcmFibGU6IHRydWUgfSxcblx0fTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyhwcm9wZXJ0aWVzLmRlZmF1bHQudmFsdWUsIHByb3BlcnRpZXMpO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyhwcm9wZXJ0aWVzLmRlZmVycmVkLnZhbHVlLCBwcm9wZXJ0aWVzKTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMocHJvcGVydGllcy5pbW1lZGlhdGUudmFsdWUsIHByb3BlcnRpZXMpO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyhwcm9wZXJ0aWVzLmV4Y2x1c2l2ZS52YWx1ZSwgcHJvcGVydGllcyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBkZWZhdWx0IHZlcnNpb24gb2YgdGhlIHRyYW5zYWN0aW9uIGZ1bmN0aW9uXG5cdHJldHVybiBwcm9wZXJ0aWVzLmRlZmF1bHQudmFsdWU7XG59O1xuXG4vLyBSZXR1cm4gdGhlIGRhdGFiYXNlJ3MgY2FjaGVkIHRyYW5zYWN0aW9uIGNvbnRyb2xsZXIsIG9yIGNyZWF0ZSBhIG5ldyBvbmVcbmNvbnN0IGdldENvbnRyb2xsZXIgPSAoZGIsIHNlbGYpID0+IHtcblx0bGV0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVycy5nZXQoZGIpO1xuXHRpZiAoIWNvbnRyb2xsZXIpIHtcblx0XHRjb25zdCBzaGFyZWQgPSB7XG5cdFx0XHRjb21taXQ6IGRiLnByZXBhcmUoJ0NPTU1JVCcsIHNlbGYsIGZhbHNlKSxcblx0XHRcdHJvbGxiYWNrOiBkYi5wcmVwYXJlKCdST0xMQkFDSycsIHNlbGYsIGZhbHNlKSxcblx0XHRcdHNhdmVwb2ludDogZGIucHJlcGFyZSgnU0FWRVBPSU5UIGBcXHRfYnMzLlxcdGAnLCBzZWxmLCBmYWxzZSksXG5cdFx0XHRyZWxlYXNlOiBkYi5wcmVwYXJlKCdSRUxFQVNFIGBcXHRfYnMzLlxcdGAnLCBzZWxmLCBmYWxzZSksXG5cdFx0XHRyb2xsYmFja1RvOiBkYi5wcmVwYXJlKCdST0xMQkFDSyBUTyBgXFx0X2JzMy5cXHRgJywgc2VsZiwgZmFsc2UpLFxuXHRcdH07XG5cdFx0Y29udHJvbGxlcnMuc2V0KGRiLCBjb250cm9sbGVyID0ge1xuXHRcdFx0ZGVmYXVsdDogT2JqZWN0LmFzc2lnbih7IGJlZ2luOiBkYi5wcmVwYXJlKCdCRUdJTicsIHNlbGYsIGZhbHNlKSB9LCBzaGFyZWQpLFxuXHRcdFx0ZGVmZXJyZWQ6IE9iamVjdC5hc3NpZ24oeyBiZWdpbjogZGIucHJlcGFyZSgnQkVHSU4gREVGRVJSRUQnLCBzZWxmLCBmYWxzZSkgfSwgc2hhcmVkKSxcblx0XHRcdGltbWVkaWF0ZTogT2JqZWN0LmFzc2lnbih7IGJlZ2luOiBkYi5wcmVwYXJlKCdCRUdJTiBJTU1FRElBVEUnLCBzZWxmLCBmYWxzZSkgfSwgc2hhcmVkKSxcblx0XHRcdGV4Y2x1c2l2ZTogT2JqZWN0LmFzc2lnbih7IGJlZ2luOiBkYi5wcmVwYXJlKCdCRUdJTiBFWENMVVNJVkUnLCBzZWxmLCBmYWxzZSkgfSwgc2hhcmVkKSxcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gY29udHJvbGxlcjtcbn07XG5cbi8vIFJldHVybiBhIG5ldyB0cmFuc2FjdGlvbiBmdW5jdGlvbiBieSB3cmFwcGluZyB0aGUgZ2l2ZW4gZnVuY3Rpb25cbmNvbnN0IHdyYXBUcmFuc2FjdGlvbiA9IChhcHBseSwgZm4sIGRiLCB7IGJlZ2luLCBjb21taXQsIHJvbGxiYWNrLCBzYXZlcG9pbnQsIHJlbGVhc2UsIHJvbGxiYWNrVG8gfSkgPT4gZnVuY3Rpb24gc3FsaXRlVHJhbnNhY3Rpb24oKSB7XG5cdGxldCBiZWZvcmUsIGFmdGVyLCB1bmRvO1xuXHRpZiAoZGIuaW5UcmFuc2FjdGlvbikge1xuXHRcdGJlZm9yZSA9IHNhdmVwb2ludDtcblx0XHRhZnRlciA9IHJlbGVhc2U7XG5cdFx0dW5kbyA9IHJvbGxiYWNrVG87XG5cdH0gZWxzZSB7XG5cdFx0YmVmb3JlID0gYmVnaW47XG5cdFx0YWZ0ZXIgPSBjb21taXQ7XG5cdFx0dW5kbyA9IHJvbGxiYWNrO1xuXHR9XG5cdGJlZm9yZS5ydW4oKTtcblx0dHJ5IHtcblx0XHRjb25zdCByZXN1bHQgPSBhcHBseS5jYWxsKGZuLCB0aGlzLCBhcmd1bWVudHMpO1xuXHRcdGFmdGVyLnJ1bigpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0gY2F0Y2ggKGV4KSB7XG5cdFx0aWYgKGRiLmluVHJhbnNhY3Rpb24pIHtcblx0XHRcdHVuZG8ucnVuKCk7XG5cdFx0XHRpZiAodW5kbyAhPT0gcm9sbGJhY2spIGFmdGVyLnJ1bigpO1xuXHRcdH1cblx0XHR0aHJvdyBleDtcblx0fVxufTtcbiJdLCJuYW1lcyI6WyJjcHBkYiIsInJlcXVpcmUiLCJjb250cm9sbGVycyIsIldlYWtNYXAiLCJtb2R1bGUiLCJleHBvcnRzIiwidHJhbnNhY3Rpb24iLCJmbiIsIlR5cGVFcnJvciIsImRiIiwiY29udHJvbGxlciIsImdldENvbnRyb2xsZXIiLCJhcHBseSIsIkZ1bmN0aW9uIiwicHJvdG90eXBlIiwicHJvcGVydGllcyIsImRlZmF1bHQiLCJ2YWx1ZSIsIndyYXBUcmFuc2FjdGlvbiIsImRlZmVycmVkIiwiaW1tZWRpYXRlIiwiZXhjbHVzaXZlIiwiZGF0YWJhc2UiLCJlbnVtZXJhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydGllcyIsInNlbGYiLCJnZXQiLCJzaGFyZWQiLCJjb21taXQiLCJwcmVwYXJlIiwicm9sbGJhY2siLCJzYXZlcG9pbnQiLCJyZWxlYXNlIiwicm9sbGJhY2tUbyIsInNldCIsImFzc2lnbiIsImJlZ2luIiwic3FsaXRlVHJhbnNhY3Rpb24iLCJiZWZvcmUiLCJhZnRlciIsInVuZG8iLCJpblRyYW5zYWN0aW9uIiwicnVuIiwicmVzdWx0IiwiY2FsbCIsImFyZ3VtZW50cyIsImV4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-sqlite3/lib/methods/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-sqlite3/lib/methods/wrappers.js":
/*!*************************************************************!*\
  !*** ./node_modules/better-sqlite3/lib/methods/wrappers.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst { cppdb } = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/better-sqlite3/lib/util.js\");\nexports.prepare = function prepare(sql) {\n    return this[cppdb].prepare(sql, this, false);\n};\nexports.exec = function exec(sql) {\n    this[cppdb].exec(sql);\n    return this;\n};\nexports.close = function close() {\n    this[cppdb].close();\n    return this;\n};\nexports.loadExtension = function loadExtension(...args) {\n    this[cppdb].loadExtension(...args);\n    return this;\n};\nexports.defaultSafeIntegers = function defaultSafeIntegers(...args) {\n    this[cppdb].defaultSafeIntegers(...args);\n    return this;\n};\nexports.unsafeMode = function unsafeMode(...args) {\n    this[cppdb].unsafeMode(...args);\n    return this;\n};\nexports.getters = {\n    name: {\n        get: function name() {\n            return this[cppdb].name;\n        },\n        enumerable: true\n    },\n    open: {\n        get: function open() {\n            return this[cppdb].open;\n        },\n        enumerable: true\n    },\n    inTransaction: {\n        get: function inTransaction() {\n            return this[cppdb].inTransaction;\n        },\n        enumerable: true\n    },\n    readonly: {\n        get: function readonly() {\n            return this[cppdb].readonly;\n        },\n        enumerable: true\n    },\n    memory: {\n        get: function memory() {\n            return this[cppdb].memory;\n        },\n        enumerable: true\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvd3JhcHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNLEVBQUVBLEtBQUssRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUUxQkMsZUFBZSxHQUFHLFNBQVNDLFFBQVFDLEdBQUc7SUFDckMsT0FBTyxJQUFJLENBQUNKLE1BQU0sQ0FBQ0csT0FBTyxDQUFDQyxLQUFLLElBQUksRUFBRTtBQUN2QztBQUVBRixZQUFZLEdBQUcsU0FBU0csS0FBS0QsR0FBRztJQUMvQixJQUFJLENBQUNKLE1BQU0sQ0FBQ0ssSUFBSSxDQUFDRDtJQUNqQixPQUFPLElBQUk7QUFDWjtBQUVBRixhQUFhLEdBQUcsU0FBU0k7SUFDeEIsSUFBSSxDQUFDTixNQUFNLENBQUNNLEtBQUs7SUFDakIsT0FBTyxJQUFJO0FBQ1o7QUFFQUoscUJBQXFCLEdBQUcsU0FBU0ssY0FBYyxHQUFHQyxJQUFJO0lBQ3JELElBQUksQ0FBQ1IsTUFBTSxDQUFDTyxhQUFhLElBQUlDO0lBQzdCLE9BQU8sSUFBSTtBQUNaO0FBRUFOLDJCQUEyQixHQUFHLFNBQVNPLG9CQUFvQixHQUFHRCxJQUFJO0lBQ2pFLElBQUksQ0FBQ1IsTUFBTSxDQUFDUyxtQkFBbUIsSUFBSUQ7SUFDbkMsT0FBTyxJQUFJO0FBQ1o7QUFFQU4sa0JBQWtCLEdBQUcsU0FBU1EsV0FBVyxHQUFHRixJQUFJO0lBQy9DLElBQUksQ0FBQ1IsTUFBTSxDQUFDVSxVQUFVLElBQUlGO0lBQzFCLE9BQU8sSUFBSTtBQUNaO0FBRUFOLGVBQWUsR0FBRztJQUNqQlUsTUFBTTtRQUNMQyxLQUFLLFNBQVNEO1lBQVMsT0FBTyxJQUFJLENBQUNaLE1BQU0sQ0FBQ1ksSUFBSTtRQUFFO1FBQ2hERSxZQUFZO0lBQ2I7SUFDQUMsTUFBTTtRQUNMRixLQUFLLFNBQVNFO1lBQVMsT0FBTyxJQUFJLENBQUNmLE1BQU0sQ0FBQ2UsSUFBSTtRQUFFO1FBQ2hERCxZQUFZO0lBQ2I7SUFDQUUsZUFBZTtRQUNkSCxLQUFLLFNBQVNHO1lBQWtCLE9BQU8sSUFBSSxDQUFDaEIsTUFBTSxDQUFDZ0IsYUFBYTtRQUFFO1FBQ2xFRixZQUFZO0lBQ2I7SUFDQUcsVUFBVTtRQUNUSixLQUFLLFNBQVNJO1lBQWEsT0FBTyxJQUFJLENBQUNqQixNQUFNLENBQUNpQixRQUFRO1FBQUU7UUFDeERILFlBQVk7SUFDYjtJQUNBSSxRQUFRO1FBQ1BMLEtBQUssU0FBU0s7WUFBVyxPQUFPLElBQUksQ0FBQ2xCLE1BQU0sQ0FBQ2tCLE1BQU07UUFBRTtRQUNwREosWUFBWTtJQUNiO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvd3JhcHBlcnMuanM/MTE5YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7IGNwcGRiIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cbmV4cG9ydHMucHJlcGFyZSA9IGZ1bmN0aW9uIHByZXBhcmUoc3FsKSB7XG5cdHJldHVybiB0aGlzW2NwcGRiXS5wcmVwYXJlKHNxbCwgdGhpcywgZmFsc2UpO1xufTtcblxuZXhwb3J0cy5leGVjID0gZnVuY3Rpb24gZXhlYyhzcWwpIHtcblx0dGhpc1tjcHBkYl0uZXhlYyhzcWwpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbmV4cG9ydHMuY2xvc2UgPSBmdW5jdGlvbiBjbG9zZSgpIHtcblx0dGhpc1tjcHBkYl0uY2xvc2UoKTtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG5leHBvcnRzLmxvYWRFeHRlbnNpb24gPSBmdW5jdGlvbiBsb2FkRXh0ZW5zaW9uKC4uLmFyZ3MpIHtcblx0dGhpc1tjcHBkYl0ubG9hZEV4dGVuc2lvbiguLi5hcmdzKTtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG5leHBvcnRzLmRlZmF1bHRTYWZlSW50ZWdlcnMgPSBmdW5jdGlvbiBkZWZhdWx0U2FmZUludGVnZXJzKC4uLmFyZ3MpIHtcblx0dGhpc1tjcHBkYl0uZGVmYXVsdFNhZmVJbnRlZ2VycyguLi5hcmdzKTtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG5leHBvcnRzLnVuc2FmZU1vZGUgPSBmdW5jdGlvbiB1bnNhZmVNb2RlKC4uLmFyZ3MpIHtcblx0dGhpc1tjcHBkYl0udW5zYWZlTW9kZSguLi5hcmdzKTtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG5leHBvcnRzLmdldHRlcnMgPSB7XG5cdG5hbWU6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uIG5hbWUoKSB7IHJldHVybiB0aGlzW2NwcGRiXS5uYW1lOyB9LFxuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdH0sXG5cdG9wZW46IHtcblx0XHRnZXQ6IGZ1bmN0aW9uIG9wZW4oKSB7IHJldHVybiB0aGlzW2NwcGRiXS5vcGVuOyB9LFxuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdH0sXG5cdGluVHJhbnNhY3Rpb246IHtcblx0XHRnZXQ6IGZ1bmN0aW9uIGluVHJhbnNhY3Rpb24oKSB7IHJldHVybiB0aGlzW2NwcGRiXS5pblRyYW5zYWN0aW9uOyB9LFxuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdH0sXG5cdHJlYWRvbmx5OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiByZWFkb25seSgpIHsgcmV0dXJuIHRoaXNbY3BwZGJdLnJlYWRvbmx5OyB9LFxuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdH0sXG5cdG1lbW9yeToge1xuXHRcdGdldDogZnVuY3Rpb24gbWVtb3J5KCkgeyByZXR1cm4gdGhpc1tjcHBkYl0ubWVtb3J5OyB9LFxuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdH0sXG59O1xuIl0sIm5hbWVzIjpbImNwcGRiIiwicmVxdWlyZSIsImV4cG9ydHMiLCJwcmVwYXJlIiwic3FsIiwiZXhlYyIsImNsb3NlIiwibG9hZEV4dGVuc2lvbiIsImFyZ3MiLCJkZWZhdWx0U2FmZUludGVnZXJzIiwidW5zYWZlTW9kZSIsImdldHRlcnMiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIm9wZW4iLCJpblRyYW5zYWN0aW9uIiwicmVhZG9ubHkiLCJtZW1vcnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-sqlite3/lib/methods/wrappers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-sqlite3/lib/sqlite-error.js":
/*!*********************************************************!*\
  !*** ./node_modules/better-sqlite3/lib/sqlite-error.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\nconst descriptor = {\n    value: \"SqliteError\",\n    writable: true,\n    enumerable: false,\n    configurable: true\n};\nfunction SqliteError(message, code) {\n    if (new.target !== SqliteError) {\n        return new SqliteError(message, code);\n    }\n    if (typeof code !== \"string\") {\n        throw new TypeError(\"Expected second argument to be a string\");\n    }\n    Error.call(this, message);\n    descriptor.value = \"\" + message;\n    Object.defineProperty(this, \"message\", descriptor);\n    Error.captureStackTrace(this, SqliteError);\n    this.code = code;\n}\nObject.setPrototypeOf(SqliteError, Error);\nObject.setPrototypeOf(SqliteError.prototype, Error.prototype);\nObject.defineProperty(SqliteError.prototype, \"name\", descriptor);\nmodule.exports = SqliteError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL3NxbGl0ZS1lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU1BLGFBQWE7SUFBRUMsT0FBTztJQUFlQyxVQUFVO0lBQU1DLFlBQVk7SUFBT0MsY0FBYztBQUFLO0FBRWpHLFNBQVNDLFlBQVlDLE9BQU8sRUFBRUMsSUFBSTtJQUNqQyxJQUFJLGVBQWVGLGFBQWE7UUFDL0IsT0FBTyxJQUFJQSxZQUFZQyxTQUFTQztJQUNqQztJQUNBLElBQUksT0FBT0EsU0FBUyxVQUFVO1FBQzdCLE1BQU0sSUFBSUMsVUFBVTtJQUNyQjtJQUNBQyxNQUFNQyxJQUFJLENBQUMsSUFBSSxFQUFFSjtJQUNqQk4sV0FBV0MsS0FBSyxHQUFHLEtBQUtLO0lBQ3hCSyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVdaO0lBQ3ZDUyxNQUFNSSxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVSO0lBQzlCLElBQUksQ0FBQ0UsSUFBSSxHQUFHQTtBQUNiO0FBQ0FJLE9BQU9HLGNBQWMsQ0FBQ1QsYUFBYUk7QUFDbkNFLE9BQU9HLGNBQWMsQ0FBQ1QsWUFBWVUsU0FBUyxFQUFFTixNQUFNTSxTQUFTO0FBQzVESixPQUFPQyxjQUFjLENBQUNQLFlBQVlVLFNBQVMsRUFBRSxRQUFRZjtBQUNyRGdCLE9BQU9DLE9BQU8sR0FBR1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL3NxbGl0ZS1lcnJvci5qcz80MjlmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IGRlc2NyaXB0b3IgPSB7IHZhbHVlOiAnU3FsaXRlRXJyb3InLCB3cml0YWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBTcWxpdGVFcnJvcihtZXNzYWdlLCBjb2RlKSB7XG5cdGlmIChuZXcudGFyZ2V0ICE9PSBTcWxpdGVFcnJvcikge1xuXHRcdHJldHVybiBuZXcgU3FsaXRlRXJyb3IobWVzc2FnZSwgY29kZSk7XG5cdH1cblx0aWYgKHR5cGVvZiBjb2RlICE9PSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHNlY29uZCBhcmd1bWVudCB0byBiZSBhIHN0cmluZycpO1xuXHR9XG5cdEVycm9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cdGRlc2NyaXB0b3IudmFsdWUgPSAnJyArIG1lc3NhZ2U7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbWVzc2FnZScsIGRlc2NyaXB0b3IpO1xuXHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBTcWxpdGVFcnJvcik7XG5cdHRoaXMuY29kZSA9IGNvZGU7XG59XG5PYmplY3Quc2V0UHJvdG90eXBlT2YoU3FsaXRlRXJyb3IsIEVycm9yKTtcbk9iamVjdC5zZXRQcm90b3R5cGVPZihTcWxpdGVFcnJvci5wcm90b3R5cGUsIEVycm9yLnByb3RvdHlwZSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU3FsaXRlRXJyb3IucHJvdG90eXBlLCAnbmFtZScsIGRlc2NyaXB0b3IpO1xubW9kdWxlLmV4cG9ydHMgPSBTcWxpdGVFcnJvcjtcbiJdLCJuYW1lcyI6WyJkZXNjcmlwdG9yIiwidmFsdWUiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJTcWxpdGVFcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwiVHlwZUVycm9yIiwiRXJyb3IiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjYXB0dXJlU3RhY2tUcmFjZSIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-sqlite3/lib/sqlite-error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-sqlite3/lib/util.js":
/*!*************************************************!*\
  !*** ./node_modules/better-sqlite3/lib/util.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nexports.getBooleanOption = (options, key)=>{\n    let value = false;\n    if (key in options && typeof (value = options[key]) !== \"boolean\") {\n        throw new TypeError(`Expected the \"${key}\" option to be a boolean`);\n    }\n    return value;\n};\nexports.cppdb = Symbol();\nexports.inspect = Symbol.for(\"nodejs.util.inspect.custom\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsd0JBQXdCLEdBQUcsQ0FBQ0UsU0FBU0M7SUFDcEMsSUFBSUMsUUFBUTtJQUNaLElBQUlELE9BQU9ELFdBQVcsT0FBUUUsQ0FBQUEsUUFBUUYsT0FBTyxDQUFDQyxJQUFJLE1BQU0sV0FBVztRQUNsRSxNQUFNLElBQUlFLFVBQVUsQ0FBQyxjQUFjLEVBQUVGLElBQUksd0JBQXdCLENBQUM7SUFDbkU7SUFDQSxPQUFPQztBQUNSO0FBRUFKLGFBQWEsR0FBR087QUFDaEJQLGVBQWUsR0FBR08sT0FBT0UsR0FBRyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL2JldHRlci1zcWxpdGUzL2xpYi91dGlsLmpzP2FkOGEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLmdldEJvb2xlYW5PcHRpb24gPSAob3B0aW9ucywga2V5KSA9PiB7XG5cdGxldCB2YWx1ZSA9IGZhbHNlO1xuXHRpZiAoa2V5IGluIG9wdGlvbnMgJiYgdHlwZW9mICh2YWx1ZSA9IG9wdGlvbnNba2V5XSkgIT09ICdib29sZWFuJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIHRoZSBcIiR7a2V5fVwiIG9wdGlvbiB0byBiZSBhIGJvb2xlYW5gKTtcblx0fVxuXHRyZXR1cm4gdmFsdWU7XG59O1xuXG5leHBvcnRzLmNwcGRiID0gU3ltYm9sKCk7XG5leHBvcnRzLmluc3BlY3QgPSBTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpO1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJnZXRCb29sZWFuT3B0aW9uIiwib3B0aW9ucyIsImtleSIsInZhbHVlIiwiVHlwZUVycm9yIiwiY3BwZGIiLCJTeW1ib2wiLCJpbnNwZWN0IiwiZm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-sqlite3/lib/util.js\n");

/***/ })

};
;